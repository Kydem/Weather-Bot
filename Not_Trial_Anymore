import os
from tokenize import Token
import discord
import python_weather
from discord import Client, Intents, Embed
from discord_slash import SlashCommand
from unicodedata import name
from dotenv import load_dotenv
from discord.ext import commands
from discord_slash.utils.manage_commands import create_option

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = int(os.getenv('DISCORD_GUILD'))
client = discord.Client(intents=discord.Intents.all())
slash = SlashCommand(client, sync_commands=True)
# Startup Information
@client.event
async def on_ready():
    await client.change_presence(activity=discord.Game('with ur mom'))
    
    print('Connected to bot: {}'.format(client.user.name))
    print('Bot ID: {}'.format(client.user.id))

@slash.slash(name="uwu")
async def dosomething(ctx):
    await ctx.send("I did something")

@slash.slash(name="ping")
async def _ping(ctx):
    await ctx.send("Pong!")

@slash.slash(name="weather", options=[create_option(
   name='input', description='place', option_type=3, required=True)])
async def getweather(ctx, input=str):
    client = python_weather.Client(format=python_weather.IMPERIAL)
    weather = await client.find(input)
    await ctx.send(f'The temperature is {weather.current.temperature} degrees fahrenheit in {input}')

    _forecasts = []
    for forecast in weather.forecasts:
          _forecasts.append(f'Weather Forecast -  {forecast.date} {forecast.sky_text} {forecast.temperature}')
    await ctx.send('\n'.join(_forecasts))
    #for forecast in weather.forecasts:
    #    await ctx.send(f'Weather Forecast -  {forecast.date} {forecast.sky_text} {forecast.temperature}')
#client.run(TOKEN)

#@slash.slash(name="forecast", options=[create_option(
   #name='input', description='place', option_type=3, required=True)])
#async def getweather(ctx, input=str):
 #   client = python_weather.Client(format=python_weather.IMPERIAL)
  #  weather = await client.find(input)
   # _forecasts = []
    #for forecast in weather.forecasts:
     #     _forecasts.append(f'Weather Forecast -  {forecast.date} {forecast.sky_text} {forecast.temperature}')
    #ctx.send(_forecasts)

client.run(TOKEN)



#